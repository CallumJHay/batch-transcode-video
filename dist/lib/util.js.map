{"version":3,"sources":["../../lib/util.js"],"names":[],"mappings":";;;;;QAAgB,UAAU,GAAV,UAAU;QAIV,QAAQ,GAAR,QAAQ;QAIR,IAAI,GAAJ,IAAI;QAKJ,MAAM,GAAN,MAAM;QAoCN,QAAQ,GAAR,QAAQ;AAjDjB,SAAS,UAAU,CAAC,GAAG,EAAE;AAC9B,SAAO,IAAI,CAAC,GAAG,CAAC,KAAK,UAAU,CAAC;CACjC,CAAC;;AAEK,SAAS,QAAQ,CAAC,GAAG,EAAE;AAC5B,SAAO,IAAI,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC;CAC/B,CAAC;;AAEK,SAAS,IAAI,CAAC,GAAG,EAAE;AACxB,MAAI,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;AACrF,SAAO,WAAW,IAAI,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC;CAClE,CAAC;;AAEK,SAAS,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE;AACjC,MAAI,GAAG,IAAI,IAAI,EAAE;AACf,UAAM,IAAI,SAAS,CAAC,iBAAiB,GAAG,GAAG,GAAG,YAAY,CAAC,CAAC;GAC7D;AACD,MAAI,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACnB,OAAK,GAAG,CAAC,KAAK,CAAC;AACf,MAAI,KAAK,IAAI,KAAK,EAAE;AAClB,SAAK,GAAG,CAAC,CAAC;GACX;AACD,MAAI,KAAK,GAAG,CAAC,EAAE;AACb,UAAM,IAAI,UAAU,CAAC,mCAAmC,CAAC,CAAC;GAC3D;AACD,MAAI,KAAK,IAAI,QAAQ,EAAE;AACrB,UAAM,IAAI,UAAU,CAAC,yCAAyC,CAAC,CAAC;GACjE;AACD,OAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC1B,MAAI,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,EAAE;AACjC,WAAO,EAAE,CAAC;GACX;AACD,MAAI,GAAG,CAAC,MAAM,GAAG,KAAK,IAAI,CAAC,IAAI,EAAE,EAAE;AACjC,UAAM,IAAI,UAAU,CAAC,oDAAoD,CAAC,CAAC;GAC5E;AACD,MAAI,GAAG,GAAG,EAAE,CAAC;AACb,WAAS;AACP,QAAI,CAAC,KAAK,GAAG,CAAC,CAAA,IAAK,CAAC,EAAE;AACpB,SAAG,IAAI,GAAG,CAAC;KACZ;AACD,SAAK,MAAM,CAAC,CAAC;AACb,QAAI,KAAK,IAAI,CAAC,EAAE;AACd,YAAM;KACP;AACD,OAAG,IAAI,GAAG,CAAC;GACZ;AACD,SAAO,GAAG,CAAC;CACZ,CAAC;;AAEK,SAAS,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE;AACvC,MAAI,UAAU,GAAG,GAAG,IAAI,EAAE,CAAC;AAC3B,MAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC;MAAE,KAAK,GAAG,EAAE;MAAE,IAAI,GAAG,EAAE;MAAE,OAAO,GAAG,CAAC,CAAC;AAC/D,MAAI,QAAQ,GAAG,SAAS,QAAQ,GAAG;AACjC,WAAO,CAAC,CAAC,IAAI,GAAG,MAAM,GAAG,EAAE,CAAA,GAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;GACtD,CAAA;AACD,MAAI,OAAO,GAAG,SAAS,OAAO,GAAG;AAC/B,QAAI,OAAO,GAAG,CAAC,EAAE;AACf,WAAK,IAAI,QAAQ,EAAE,CAAC;AACpB,aAAO,GAAG,CAAC,CAAC;AACZ,UAAI,GAAG,EAAE,CAAC;KACX;GACF,CAAA;AACD,MAAI,UAAU,GAAG,SAAS,UAAU,CAAC,CAAC,EAAE;AACtC,WAAO,IAAI,CAAC,CAAC,MAAM,CAAC;AACpB,QAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;GACd,CAAA;AACD,OAAK,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AAC5B,QAAI,AAAC,OAAO,GAAG,IAAI,CAAC,MAAM,GAAI,UAAU,EAAE;AACxC,aAAO,EAAE,CAAC;KACX;AACD,cAAU,CAAC,IAAI,CAAC,CAAC;GAClB,CAAC,CAAC;AACH,SAAO,EAAE,CAAC;AACV,SAAO,KAAK,CAAC;CACd,CAAC","file":"util.js","sourcesContent":["export function isFunction(obj) {\n  return type(obj) === 'function';\n};\n\nexport function isString(obj) {\n  return type(obj) === 'string';\n};\n\nexport function type(obj) {\n  let typeMatches = Object.prototype.toString.call(obj).match(/\\[object\\s([a-z]+)\\]/i);\n  return typeMatches != null ? typeMatches[1].toLowerCase() : null;\n};\n\nexport function repeat(str, count) {\n  if (str == null) {\n    throw new TypeError('can\\'t convert ' + str + ' to object');\n  }\n  var str = '' + str;\n  count = +count;\n  if (count != count) {\n    count = 0;\n  }\n  if (count < 0) {\n    throw new RangeError('repeat count must be non-negative');\n  }\n  if (count == Infinity) {\n    throw new RangeError('repeat count must be less than infinity');\n  }\n  count = Math.floor(count);\n  if (str.length == 0 || count == 0) {\n    return '';\n  }\n  if (str.length * count >= 1 << 28) {\n    throw new RangeError('repeat count must not overflow maximum string size');\n  }\n  var rpt = '';\n  for (;;) {\n    if ((count & 1) == 1) {\n      rpt += str;\n    }\n    count >>>= 1;\n    if (count == 0) {\n      break;\n    }\n    str += str;\n  }\n  return rpt;\n};\n\nexport function splitter(str, left, len) {\n  var MAX_LENGTH = len || 40;\n  var words = str.split(' '), built = '', line = [], lineLen = 0;\n  var makeLine = function makeLine() {\n    return (!left ? '\\t\\t' : '') + line.join(' ') + '\\n';\n  }\n  var addLine = function addLine() {\n    if (lineLen > 0) {\n      built += makeLine();\n      lineLen = 0;\n      line = [];\n    }\n  }\n  var extendLine = function extendLine(w) {\n    lineLen += w.length;\n    line.push(w);\n  }\n  words.forEach(function (word) {\n    if ((lineLen + word.length) > MAX_LENGTH) {\n      addLine();\n    }\n    extendLine(word);\n  });\n  addLine();\n  return built;\n};\n"]}