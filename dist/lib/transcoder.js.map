{"version":3,"sources":["../../lib/transcoder.js"],"names":[],"mappings":"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","file":"transcoder.js","sourcesContent":["let chalk         = require('chalk');\nlet options       = require('./options');\nlet path          = require('path');\nlet Promise       = require('promise');\nlet denodeify     = Promise.denodeify;\nlet mkdirp        = denodeify(require('mkdirp'));\nlet stat          = denodeify(require('fs').stat);\nlet childPromise  = require('./child-promise');\nlet parse         = require('shell-quote').parse;\nlet say           = require('./say');\nlet pace          = require('pace');\nlet curDir        = process.cwd();\n\nlet progressPattern = 'Encoding: task';\nlet progressPercent = /(\\d{1,3}\\.\\d{1,2})\\s*\\%/;\nlet timePattern = '([0-9]{2}\\:[0-9]{2}\\:[0-9]{2})';\nlet handbrakeLog = new RegExp(`^${timePattern}`);\nlet handbrakeFinish = new RegExp(`Encode done![\\n\\s]*HandBrake has exited.[\\s\\n]*Elapsed time: ${timePattern}`, 'i');\n\nfunction handbrakeProgress(str) {\n  let quant;\n  let lastIndex = str.lastIndexOf(progressPattern);\n  if (lastIndex !== -1 && progressPercent.test(str)) {\n    let matches = str.substr(lastIndex).match(progressPercent);\n    quant = Number.parseFloat(matches[1]) / 100.0;\n  }\n  return quant;\n}\n\nfunction getErrorHandler(file) {\n  return function (err) {\n    err.file = err.file || file;\n    say.notify(err);\n  };\n}\n\nmodule.exports = function transcoder(files) {\n  let unknownSizes  = say.notify._fileCount;\n  // TODO: get progress bar to render at 0%\n  let progressBar   = pace({total: Math.max(unknownSizes * 100, 100)});\n  let fileSizes     = [];\n  let knownSizes    = (frac = 1.0) => (fileSizes.length ? Number.parseInt(fileSizes[0] * frac, 10) : 0) + fileSizes.slice(1).reduce((p, c) => p + c, 0);\n  let currentQuant  = 0;\n  let startTime = Date.now();\n  let lastTime = startTime;\n\n  let updateProgress = function updateProgress(f) {\n    progressBar.op(Math.min(knownSizes(f), progressBar.total));\n  };\n\n  let progressTimer = setInterval(function timingFunction() {\n    if (currentQuant > 0) {\n      let currentTime = Date.now();\n      let totalTime = (lastTime - startTime) / currentQuant;\n      let elapsedSinceLast = (currentTime - startTime) / totalTime;\n      updateProgress(Math.max(Math.min(elapsedSinceLast, 1.0), 0));\n    } else {\n      progressBar.op(Math.min(progressBar.current + (progressBar.total * 0.005), progressBar.total));\n    }\n  }, 1000);\n\n  progressBar.op(1);\n\n  let updateProgressTotal = function updateProgressTotal(size) {\n    if (Number.isInteger(size)) {\n      let sizeNorm = Number.parseInt(size / 1000000.0, 10);\n      fileSizes.unshift(sizeNorm);\n    } else {\n      say.notify._fileCount -= 1;\n      say.notify._skipCount += 1;\n    }\n    unknownSizes -= 1;\n    let adjTotal = knownSizes();\n    let avgSize = Number.parseInt(adjTotal / fileSizes.length, 10);\n    adjTotal += avgSize * unknownSizes;\n    progressBar.total = adjTotal;\n    return adjTotal;\n  };\n\n  function processNext(arr) {\n    if (arr.length) {\n      currentQuant = 0;\n      startTime = Date.now();\n      lastTime = startTime;\n      let filePath = arr.shift();\n      let filePathNorm = path.normalize(filePath);\n      let fileName = path.basename(filePathNorm);\n      let filePathDir = path.dirname(filePathNorm);\n      // TODO: will change based on custom options\n      let destFileName = path.basename(fileName, path.extname(fileName)) + '.' + options['dest-ext'];\n      let usePath, logFileName, destFilePath, sourceFilePath;\n      let errCatcher = getErrorHandler(fileName);\n      let sourceFileSize;\n      // console.log(chalk.blue.bold('- ' + fileName));\n      if (options['output']) {\n        let outputDir = path.relative(curDir, options['output']);\n        usePath = !options['flatten'] ?\n            // Add relative paths from --input to filePathDir when --o given\n            path.resolve(outputDir, path.relative(options['input'], filePathDir)) :\n            // --flatten option so do not add relative path\n            outputDir;\n      } else {\n        // Output is same place a input\n        usePath = filePathDir;\n      }\n\n      // Use relative path from curDir (cwd)\n      usePath = path.resolve(curDir, usePath);\n      sourceFilePath = path.relative(curDir, filePathNorm);\n      destFilePath = path.normalize(usePath + path.sep + destFileName);\n\n      let nextFile = function () {\n        return processNext(arr);\n      };\n\n      // Adjust the total running time\n      return stat(sourceFilePath)\n      .then(function (stats) {\n        // Update the progress bar based on the size of the source file\n        sourceFileSize = stats.size;\n        return mkdirp(usePath, {});\n      })\n      .then(function () {\n        return stat(destFilePath);\n      })\n      .then(function (stats) {\n        // Destination file already exists, subtract from totals\n        updateProgressTotal(null);\n        var e = new Error('File already exists in output directory.');\n        e.type = options['diff'] ? say.INFO : say.ERROR;\n        e.file = destFilePath;\n        throw e;\n      }, function (err) {\n        updateProgressTotal(sourceFileSize);\n        return childPromise('detect-crop', [sourceFilePath], fileName, curDir, !options['debug'])\n        .then(function (res) {\n          let commandLines = res.replace(/\\n+$/gm, '');\n          let commands = commandLines.split(/\\n+/);\n          let useCommand = commands[commands.length - 1].trim();\n          if (!/^transcode\\-video/.test(useCommand)) {\n            let e = new Error('Crop detection failed. Skipping transcode for file.');\n            e.additional = useCommand;\n            throw e;\n          }\n          return useCommand;\n        })\n        .then(function (command) {\n          let useArgs = parse(command);\n          useArgs.splice(1, 0, '--output', usePath);\n          if (options['--'].length) {\n            useArgs.splice.apply(useArgs, [useArgs.length - 1, 0].concat(options['--']));\n          }\n          let crop = useArgs.indexOf('--crop') + 1;\n          if (crop > 0) {\n            say.notify(`Crop values detected for file: ${useArgs[crop]}.`, say.DEBUG, fileName, command);\n          } else {\n            let e = new Error('Could not detect crop values. Skipping transcode for file.');\n            e.additional = command;\n            throw e;\n          }\n          return useArgs;\n        })\n        .then(function (args) {\n          say.notify('Starting transcoding operation for file.', say.DEBUG, fileName, args.join(' '));\n          return childPromise(args[0], args.slice(1), fileName, curDir, !options['debug'], function (buff) {\n            let quant = handbrakeProgress(buff);\n            if (quant !== null) {\n              currentQuant = quant;\n              lastTime = Date.now();\n              // updateProgress(quant);\n            }\n          });\n        })\n        .then(function (output) {\n          // Get total running time\n          if (options['dry-run']) {\n            say.notify('Finished processing file.', say.INFO, destFilePath, output);\n          } else {\n            // Check the output from the trasncode to confirm it finished\n            let transcodeStatus = output.match(handbrakeFinish);\n            if (transcodeStatus === null) {\n              let e = new Error('Transcode probably did not succeed for file.');\n              e.additional = output;\n              throw e;\n            }\n            return childPromise('query-handbrake-log', ['time', destFilePath + '.log'], destFileName, curDir, true)\n            .then(function (log) {\n              let totalTime = log.trim().match(timePattern)[1];\n              say.notify(`Total: ${transcodeStatus[1]}. Transcoding: ${totalTime}`, say.WRITE, destFilePath, output);\n            });\n          }\n        });\n      })\n      .catch(errCatcher)\n      .then(nextFile, nextFile);\n    }\n    say.notify.stopProgressTimer();\n    progressBar.op(progressBar.total);\n    return Promise.resolve(true);\n  }\n\n  return processNext(files);\n};\n"]}