{"version":3,"sources":["../index.js"],"names":[],"mappings":";;;;;kBAawB,mBAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAL/B,GAAG;;;;;;;;;;;;AAHf,IAAI,IAAI,GAAG,aAHH,SAAS,iBAGU,CAAC;;AAM5B,IAAI,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;;AAEZ,SAAS,mBAAmB,GAAG;AAC5C,MAAI,kBAAQ,MAAM,CAAC,EAAE;AACnB,WAAO,CAAC,GAAG,CAAC,qBAAM,CAAC,CAAC;AACpB,WAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;GACjB;;AAED,SAAO,CAAC,EAAE,CAAC,MAAM,EAAE,YAAY;AAC7B,QAAI,OAAO,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;AAC/B,OAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AACxB,QAAI,CAAC,OAAO,CAAC,SAAS,EAAE;AACtB,aAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;KACvB;GACF,CAAC,CAAC;;AAEH,MAAI,WAAW,GAAG,eAAK,SAAS,CAAC,kBAAQ,OAAO,CAAC,GAAG,eAAK,GAAG,GAAG,kBAAQ,MAAM,CAAC,CAAC,CAAC;AAChF,SAAO,CAAC,GAAG,CAAC,gBAAM,KAAK,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC,CAAC;AAC/D,KAAG,CAAC,MAAM,CAAC,0CAA0C,EAAE,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;AAC/E,SAAO,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC,CAC3B,IAAI,CAAC,UAAU,KAAK,EAAE;AACrB,QAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;AACtB,UAAI,EAAC,GAAG,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;AACjE,QAAC,CAAC,IAAI,GAAG,WAAW,CAAC;AACrB,YAAM,EAAC,CAAC;KACT;AACD,OAAG,CAAC,MAAM,CAAC,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC;AACrC,WAAO,0BAAW,KAAK,CAAC,CAAC;GAC1B,EAAE,UAAU,GAAG,EAAE;AAChB,KAAC,CAAC,IAAI,GAAG,WAAW,CAAC;AACrB,KAAC,CAAC,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC;AAC3B,KAAC,CAAC,OAAO,GAAG,yDAAyD,CAAC;AACtE,UAAM,GAAG,CAAC;GACX,CAAC,CACD,KAAK,CAAC,UAAU,GAAG,EAAE;AACpB,OAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;GACjB,CAAC,CACD,IAAI,CAAC,YAAY;AAChB,WAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;GACjB,CAAC,CAAC;CACJ,CAAC","file":"index.js","sourcesContent":["import chalk from 'chalk';\nimport path from 'path';\nimport {denodeify} from 'promise';\nimport _glob from 'glob';\nimport help from './lib/help.js';\nlet glob = denodeify(_glob);\nimport transcoder from './lib/transcoder.js';\nimport options from './lib/options.js';\nimport * as say from './lib/say.js';\nimport childPromise from './lib/child-promise.js';\nimport {repeat} from './lib/util.js';\nlet curDir = process.cwd();\n\nexport default function batchTranscodeVideo() {\n  if (options['help']) {\n    console.log(help());\n    process.exit(0);\n  }\n\n  process.on('exit', function () {\n    let summary = say.getSummary();\n    say.logSummary(summary);\n    if (!summary.isSuccess) {\n      process.reallyExit(1);\n    }\n  });\n\n  let filePattern = path.normalize(options['input'] + path.sep + options['mask']);\n  console.log(chalk.white.bold('- Starting batch operation...'));\n  say.notify('Scanning for media using search pattern.', say.DEBUG, filePattern);\n  return glob(filePattern, {})\n  .then(function (files) {\n    if (files.length === 0) {\n      let e = new Error('No files found for search pattern provided.');\n      e.file = filePattern;\n      throw e;\n    }\n    say.notify._fileCount = files.length;\n    return transcoder(files);\n  }, function (err) {\n    e.file = filePattern;\n    e.additional = err.message;\n    e.message = 'File system error encountered while scanning for media.';\n    throw err;\n  })\n  .catch(function (err) {\n    say.notify(err);\n  })\n  .then(function () {\n    process.exit(0);\n  });\n};\n"]}